"""
Django settings for fishauctions project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

ADMINS = [("Admin", os.environ.get("ADMIN_EMAIL", "admin@example.com"))]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "unsecure")

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("DEBUG", "1") == "False":
    DEBUG = False
else:
    DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "web",
    "127.0.0.1",
    "0.0.0.0",
    os.environ.get("SITE_DOMAIN", ""),
    os.environ.get("ALLOWED_HOST_1", ""),
    os.environ.get("ALLOWED_HOST_2", ""),
    os.environ.get("ALLOWED_HOST_3", ""),
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://127.0.0.1",
    "https://" + os.environ.get("SITE_DOMAIN", ""),
    "https://" + os.environ.get("ALLOWED_HOST_1", ""),
    "https://" + os.environ.get("ALLOWED_HOST_2", ""),
    "https://" + os.environ.get("ALLOWED_HOST_3", ""),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module}.{funcName}:{lineno} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{name} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "django_file": {
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "/home/logs/django.log",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        "root_file": {
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "/home/logs/root.log",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        "mail_admins": {"level": "ERROR", "class": "django.utils.log.AdminEmailHandler"},
        "null": {
            "class": "logging.NullHandler",
        },
    },
    "root": {
        "handlers": ["console", "root_file"],
        "level": os.getenv("LOG_LEVEL", "INFO"),
    },
    "loggers": {
        "django": {
            "handlers": ["django_file"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "weasyprint": {
            # 'handlers': ["null"],
            "level": "WARNING",
            "propagate": False,
        },
        "fontTools": {
            # 'handlers': ["null"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

# Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                (
                    "redis://:"
                    + os.environ.get("REDIS_PASSWORD", "unsecure")
                    + "@"
                    + os.environ.get("REDIS_HOST", "redis")
                    + ":6379/0"
                )
            ],
            # "hosts": [('127.0.0.1', 6379)],
            "capacity": 2000,  # default 100
            "expiry": 20,  # default 60
        },
    },
}

# Application definition
INSTALLED_APPS = [
    "auctions",
    "dal",
    "dal_select2",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_summernote",
    # 'site_settings',
    "crispy_forms",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "django_filters",
    "bootstrap_datepicker_plus",
    "el_pagination",
    "easy_thumbnails",
    "post_office",
    "location_field",
    "channels",
    # 'debug_toolbar', # having this enabled is handy for sql queries but silences errors in channels
    "markdownfield",
    "qr_code",
    "django_tables2",
    "django_htmx",
    "crispy_bootstrap5",
    "django_recaptcha",
    "chartjs",
    "django_ses",
    "webpush",
]
ASGI_APPLICATION = "fishauctions.asgi.application"
MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "fishauctions.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "auctions.context_processors.google_analytics",
                "auctions.context_processors.google_oauth",
                "auctions.context_processors.theme",
                "auctions.context_processors.add_location",
                "auctions.context_processors.dismissed_cookies_tos",
                "auctions.context_processors.site_config",
                "auctions.context_processors.add_tz",
            ],
        },
    },
]

WSGI_APPLICATION = "fishauctions.wsgi.application"

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ.get("TIME_ZONE", "America/New_York")

USE_I18N = False

USE_L10N = False

USE_TZ = True

DATETIME_FORMAT = "M j, Y P e"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

SITE_ID = 1
SITE_DOMAIN = os.environ.get("SITE_DOMAIN", "127.0.0.1")


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "/home/app/web/staticfiles/"

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

# for https://pypi.org/project/django-webpush/
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.environ.get("VAPID_PUBLIC_KEY", "abcde"),
    "VAPID_PRIVATE_KEY": os.environ.get("VAPID_PRIVATE_KEY", "abc"),
    "VAPID_ADMIN_EMAIL": os.environ.get("ADMIN_EMAIL", "admin@example.com"),
}

# Use sqlite for testing
if "test" in sys.argv:
    # if True: # for migrations
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get(
                "DATABASE_ENGINE", "django.db.backends.mysql"
            ),  # mysql_server_has_gone_away does not appear to resolve this issue
            "NAME": os.environ.get("DATABASE_NAME", "auctions"),
            "USER": os.environ.get("DATABASE_USER", "mysqluser"),
            "PASSWORD": os.environ.get("DATABASE_PASSWORD", "unsecure"),
            "HOST": os.environ.get("DATABASE_HOST", "db"),
            "PORT": os.environ.get("DATABASE_PORT", "3306"),
            "OPTIONS": {
                "charset": "utf8mb4",
            },
            "CONN_MAX_AGE": 0,  # don't reuse connections for ASGI
            "CONN_HEALTH_CHECKS": True,
        }
    }

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
# BASE_URL = os.environ.get('BASE_URL', 'http://127.0.0.1:8000')

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/login/"
ACCOUNT_FORMS = {
    "signup": "auctions.forms.CustomSignupForm",
    "reset_password": "auctions.forms.CustomResetPasswordForm",
}
# ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_LOGIN_METHODS = {"username", "email"}
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
ACCOUNT_CHANGE_EMAIL = True

SESSION_COOKIE_AGE = 1209600 * 100

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "post_office.EmailBackend"

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

POST_OFFICE = {
    "MAX_RETRIES": 4,
    "RETRY_INTERVAL": datetime.timedelta(minutes=15),  # Schedule to be retried 15 minutes later
    "BACKENDS": {
        "default": os.environ.get("POST_OFFICE_EMAIL_BACKEND", "django_ses.SESBackend"),
    },
}
# django-ses configuration
AWS_SES_AUTO_THROTTLE = 0.5
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY", "")
# https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-files.html
# AWS_SESSION_PROFILE = os.environ.get('AWS_SESSION_PROFILE', 'default')
AWS_SES_REGION_NAME = os.environ.get("AWS_SES_REGION_NAME", "us-east-1")
AWS_SES_REGION_ENDPOINT = os.environ.get("AWS_SES_REGION_ENDPOINT", 'email.us-east-1.amazonaws.com"')
USE_SES_V2 = True
AWS_SES_CONFIGURATION_SET = os.environ.get("AWS_SES_CONFIGURATION_SET", "")
AWS_SES_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "user@example.com")

if os.environ.get("EMAIL_USE_TLS", "True") == "True":
    EMAIL_USE_TLS = True
else:
    EMAIL_USE_TLS = False
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "user@example.com")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "unsecure")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "user@example.com")
EMAIL_SUBJECT_PREFIX = ""

RECAPTCHA_PUBLIC_KEY = os.environ.get("RECAPTCHA_PUBLIC_KEY", "unsecure")
RECAPTCHA_PRIVATE_KEY = os.environ.get("RECAPTCHA_PRIVATE_KEY", "unsecure")

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
# It sure seems like forms fail silently even with this set to False
# CRISPY_FAIL_SILENTLY = False
# BOOTSTRAP4 = {
#     'include_jquery': True,
# }

MEDIA_URL = "media/"
MEDIA_ROOT = "/home/app/web/mediafiles/"

EL_PAGINATION_PER_PAGE = 20
# SITE_URL = os.environ.get('SITE_URL', BASE_URL)

THUMBNAIL_ALIASES = {
    "": {
        "ad": {"size": (250, 150), "crop": False},
        "lot_list": {"size": (250, 150), "crop": "smart"},
        # 'lot_full': {'size': (600, 600), 'crop': False},
    },
}
THUMBNAIL_DEFAULT_STORAGE_ALIAS = "default"

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
        "FETCH_USERINFO": True,
    }
}
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_LOGIN_ON_GET = True

INTERNAL_IPS = [
    #    '127.0.0.1', # uncomment this to enable the django debug toolbar
]

VIEW_WEIGHT = 1
BID_WEIGHT = 10
WEIGHT_AGAINST_TOP_INTEREST = 20

GOOGLE_MEASUREMENT_ID = os.environ.get("GOOGLE_MEASUREMENT_ID", "")
GOOGLE_TAG_ID = os.environ.get("GOOGLE_TAG_ID", "")
GOOGLE_ADSENSE_ID = os.environ.get("GOOGLE_ADSENSE_ID", "")

GOOGLE_OAUTH_LINK = os.environ.get("GOOGLE_OAUTH_LINK", "unsecure")
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"

LOCATION_FIELD_PATH = "/static/location_field"

LOCATION_FIELD = {
    "map.provider": "google",
    "map.zoom": 13,
    "search.provider": "google",
    "search.suffix": "",
    # Google
    "provider.google.api": "//maps.google.com/maps/api/js?sensor=false",
    "provider.google.api_key": os.environ.get("GOOGLE_MAPS_API_KEY", "unsecure"),
    "provider.google.api_libraries": "",
    "provider.google.map.type": "ROADMAP",
    # misc
    "resources.root_path": LOCATION_FIELD_PATH,
    "resources.media": {
        "js": (LOCATION_FIELD_PATH + "/js/form.js",),
    },
}

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# when a user adds an unverified email address to their auction, send an email about the site
SEND_WELCOME_EMAIL = True

DATA_UPLOAD_MAX_NUMBER_FIELDS = 20000

NAVBAR_BRAND = os.environ.get("NAVBAR_BRAND", "auction.fish")
WEBSITE_FOCUS = os.environ.get("WEBSITE_FOCUS", "items")
COPYRIGHT_MESSAGE = os.environ.get(
    "COPYRIGHT_MESSAGE",
    "bottom text",
)
I_BRED_THIS_FISH_LABEL = os.environ.get("I_BRED_THIS_FISH_LABEL", "I bred this fish/propagated this plant")
if os.environ.get("ALLOW_USERS_TO_CREATE_AUCTIONS", "True") == "False":
    ALLOW_USERS_TO_CREATE_AUCTIONS = False
else:
    ALLOW_USERS_TO_CREATE_AUCTIONS = True
if os.environ.get("ALLOW_USERS_TO_CREATE_LOTS", "True") == "False":
    ALLOW_USERS_TO_CREATE_LOTS = False
else:
    ALLOW_USERS_TO_CREATE_LOTS = True
if os.environ.get("ENABLE_PROMO_PAGE", "True") == "False":
    ENABLE_PROMO_PAGE = False
else:
    ENABLE_PROMO_PAGE = True
if os.environ.get("ENABLE_CLUB_FINDER", "True") == "False":
    ENABLE_CLUB_FINDER = False
else:
    ENABLE_CLUB_FINDER = True
if os.environ.get("ENABLE_HELP", "True") == "False":
    ENABLE_HELP = False
else:
    ENABLE_HELP = True
MAILING_ADDRESS = os.environ.get("MAILING_ADDRESS", "No address configured")
WEEKLY_PROMO_MESSAGE = os.environ.get("WEEKLY_PROMO_MESSAGE", "")

# the following words are very common and should not be used when generating recommended lots or assigning categories
IGNORE_WORDS = [
    "albino",
    "red",
    "blue",
    "pair",
    "super",
    "fish",
    "black",
    "breeding",
    "group",
    "fry",
    "female",
    "water",
    "male",
    "trio",
    "green",
    "lot",
    "fin",
    "yellow",
    "gold",
    "large",
    "donation",
    "young",
    "filter",
    "white",
    "fire",
    "blood",
    "and",
    "orange",
    "bag",
    "qty",
    "juvies",
    "starter",
    "adult",
    "hardy",
    "with",
    "small",
    "size",
    "breeders",
    "brown",
    "breeder",
    "pack",
    "two",
    "pink",
    "proven",
    "better",
    "than",
    "more",
    "adults",
    "inch",
    "from",
    "wild",
    "bunch",
    "superb",
    "the",
    "double",
    "reverse",
    "new",
    "test",
]
ONLINE_TUTORIAL_YOUTUBE_ID = "mNcOjAakC4c"
ONLINE_TUTORIAL_CHAPTERS = (
    (0, "Intro"),
    (45, "Account creation"),
    (1 * 60 + 25, "Auction creation"),
    (1 * 60 + 49, "Setting the location to exchange lots"),
    (2 * 60 + 37, "Rules"),
    (4 * 60 + 2, "Joining the auction"),
    (5 * 60 + 2, "Adding lots"),
    (6 * 60 + 30, "Copying lots"),
    (6 * 60 + 51, "Issues with joining your auction"),
    (8 * 60 + 58, "Bidding and proxy bidding"),
    (9 * 60 + 49, "Sniping and the end of the auction"),
    (11 * 60 + 11, "Invoices"),
    (12 * 60 + 9, "Paypal Batch Invoicing"),
    (13 * 60 + 12, "What happens if someone doesn't pay?"),
    (14 * 60 + 20, "Lot labels"),
    (15 * 60 + 23, "Stats"),
    (17 * 60 + 13, "Multi-location auctions"),
    (19 * 60 + 29, "Help and support"),
)
IN_PERSON_TUTORIAL_YOUTUBE_ID = "BXnoMMU_aCQ"
IN_PERSON_TUTORIAL_CHAPTERS = (
    (0, "Intro"),
    (36, "Account creation"),
    (1 * 60 + 17, "Auction creation"),
    (1 * 60 + 45, "Rules"),
    (2 * 60 + 54, "Location"),
    (3 * 60 + 22, "Joining the auction"),
    (3 * 60 + 44, "Adding users manually"),
    (4 * 60 + 31, "Users joining your auction"),
    (4 * 60 + 47, "Auction administrators"),
    (5 * 60 + 42, "Adding lots"),
    (6 * 60 + 10, "Editing lots"),
    (6 * 60 + 34, "Users adding lots"),
    (7 * 60 + 38, "Lot labels"),
    (8 * 60 + 37, "The auction itself: Set lot winners"),
    (9 * 60 + 50, "Some common issues with selling lots"),
    (11 * 60 + 1, "Invoices and payments"),
    (13 * 60 + 3, "Auction hall layout"),
    (14 * 60 + 5, "Images and lots"),
    (14 * 60 + 45, "Selling fees discounts for club members"),
    (15 * 60 + 52, "Changing bidder numbers"),
    (16 * 60 + 38, "Stats"),
    (18 * 60 + 54, "Attrition and Buy Now"),
    (22 * 60 + 50, "Reusing rules in your next auction"),
    (23 * 60 + 25, "Copying users between auctions"),
    (24 * 60 + 00, "Advertising"),
    (24 * 60 + 52, "Help and Support"),
)
HYBRID_TUTORIAL_YOUTUBE_ID = "tLR7l4Xsgtc"
HYBRID_TUTORIAL_CHAPTERS = (
    (0, "Intro"),
    (13, "Enable online bidding"),
    (33, "Bidding"),
    (59, "Seeing the max bid"),
    (1 * 60 + 27, "Setting winners"),
    (2 * 60 + 3, "Buy Now"),
    (2 * 60 + 45, "Payment"),
)
SUMMERNOTE_THEME = "bs5"

SUMMERNOTE_CONFIG = {
    "iframe": True,
    "summernote": {
        # Change editor size
        "width": "100%",
        # 'height': '480',
        # https://summernote.org/deep-dive/#custom-toolbar-popover
        "toolbar": [
            ["style", ["style"]],
            ["font", ["bold", "italic", "clear"]],
            # ['color', ['color']],
            [
                "para",
                [
                    "ul",
                    "ol",
                ],
            ],
            [
                "insert",
                [
                    "link",
                ],
            ],  # 'picture', 'video']],
            # ['view', ['fullscreen', 'codeview', 'help']],
        ],
    },
    "js": (
        ("/static/summernote/bs5-hack.js"),
        ("/static/summernote/clean-on-paste.js"),
    ),
    # Require users to be authenticated for uploading attachments.
    # 'attachment_require_authentication': True,
    # Set `upload_to` function for attachments.
    # 'attachment_upload_to': my_custom_upload_to_func(),
    # Set custom storage class for attachments.
    # 'attachment_storage_class': 'my.custom.storage.class.name',
    # Set custom model for attachments (default: 'django_summernote.Attachment')
    # 'attachment_model': 'my.custom.attachment.model',  # must inherit 'django_summernote.AbstractAttachment'
    # You can completely disable the attachment feature.
    # 'disable_attachment': True,
    # Set to `False` to return attachment paths in relative URIs.
    # 'attachment_absolute_uri': True,
}

X_FRAME_OPTIONS = "SAMEORIGIN"
